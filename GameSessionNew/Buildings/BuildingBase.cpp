#include "stdafx.h"
#include "BuildingBase.h"

#include "GameSessionNew/Camera/Camera.h"
#include "GameSessionNew/Manager/CameraManager.h"
#include "GameSessionNew/Manager/RenderManager.h"
#include "GameSessionNew/Physics/PhysicsEnums.h"

//////////////////////////////////////////////////////////////////////////

namespace hvgs
{

//////////////////////////////////////////////////////////////////////////

void CBuildingBase::Draw() const
{
	ScreenPos renderSize = CCameraManager::Get().GetActive()->WorldToScreenDirection(m_Size);
	CRenderManager::GetMutable().DrawSpriteWorld(m_Position, GetBuildingTexture(), renderSize, Alignment::CenterBottom);
}

//////////////////////////////////////////////////////////////////////////

hvgs::Layer CBuildingBase::GetLayer() const
{
	return Layer::Building;
}

//////////////////////////////////////////////////////////////////////////

const hvgs::WorldPos& CBuildingBase::GetPosition() const
{
	return m_Position;
}

//////////////////////////////////////////////////////////////////////////

void CBuildingBase::SetPosition(const WorldPos& position)
{
	m_Position = position;
}

//////////////////////////////////////////////////////////////////////////

const hvgs::Vector2& CBuildingBase::GetSize() const
{
	return m_Size;
}

//////////////////////////////////////////////////////////////////////////

void CBuildingBase::SetSize(const Vector2& value)
{
	m_Size = value;
}

//////////////////////////////////////////////////////////////////////////

hvgs::WorldPos CBuildingBase::GetAABBOrigin() const
{
	return m_Position + WorldPos(0.0f, GetAABBHalfs().y);
}

//////////////////////////////////////////////////////////////////////////

hvgs::WorldPos CBuildingBase::GetAABBHalfs() const
{
	return m_Size * 0.5f;
}

//////////////////////////////////////////////////////////////////////////

} // hvgs
